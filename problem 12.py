"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1
+ 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


def triangle_number(n):
    return (n * (n + 1)) / 2  # formula to find the sum of first n natural number.


def factorization(n):
    """
    this function prime factorize  a taken number and return a dictionary
    where keys are prime factor and corresponding values are the number of appearance of that number(key)
    """
    for i in range(2, n + 1):
        if n / i == 1:
            return {i: 1}
        else:
            if n % i == 0:
                get_dicti = factorization(int(n / i))
                if i not in get_dicti:
                    get_dicti[i] = 1
                else:
                    get_dicti[i] += 1

                return get_dicti


div = False
i = 2                      # here if i start from i = 1, the factorization() function returns an empty dictionary
while div == False:        # and which leads to an error
    get_number = int(triangle_number(i))

    total_divisor = 1
    for ele in factorization(get_number).values():
        total_divisor *= (ele + 1)

    if total_divisor > 500:
        print(i, get_number)
        div = True
    else:
        div = False

    i += 1
